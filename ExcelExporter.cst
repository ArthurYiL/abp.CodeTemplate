<%@ CodeTemplate Language="C#" TargetLanguage="C#" ResponseEncoding="UTF-8" Description="Generates a single entity business class." Debug="True" %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="2.数据库" Description="Database table that this entity should be based on." %>
<%@ Property Name="TablePrefixes" Type="String" Default="" Optional="True" Category="2.数据库" Description="The table prefix to be cut from the class name" %>
<%@ Property Name="RootNamespace" Type="String" Default="HashBlockChain" Optional="False" Category="1.名称空间" Description="系统名称空间的根名称." %>
<%@ Property Name="Namespace" Type="String" Default="ZLDB_Domain" Optional="False" Category="1.名称空间" Description="系统当前所属文件夹的名称（命名空间相关）." %>
<%@ Property Name="FolderNamespace" Type="String" Default="" Optional="true" Category="1.名称空间" Description="系统名称空间的Model名称." %>
<%@ Property Name="PrefixLength" Type="Int32" Default="0" Optional="False" Category="2.数据库" Description="数据表前缀截取长度." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%string tableClass=GetClassName(SourceTable, "", 0); %>
<% string tableName=SourceTable.Name.ToString();%>
<%string paramName=GetParamName(tableName); %>
using System.Collections.Generic;
using Abp.Runtime.Session;
using Abp.Timing.Timezone;
using <%=RootNamespace%>.DataExporting.Excel.EpPlus;
using <%=RootNamespace%>.Dto;
using <%=RootNamespace%>.ZLDB_Domain.Dtos;

namespace <%=RootNamespace%>.Authorization.<%=tableName%>.Exporting
{
    public class <%=tableName%>ListExcelExporter : EpPlusExcelExporterBase, I<%=tableName%>ListExcelExporter
    {
        private readonly ITimeZoneConverter _timeZoneConverter;
        private readonly IAbpSession _abpSession;

        public <%=tableName%>ListExcelExporter(
            ITimeZoneConverter timeZoneConverter, 
            IAbpSession abpSession)
        {
            _timeZoneConverter = timeZoneConverter;
            _abpSession = abpSession;
        }

        public FileDto ExportToFile(List<<%=tableName%>Dto> <%=paramName%>ListDtos)
        {
            return CreateExcelPackage(
                "<%=tableName%>List.xlsx",
                excelPackage =>
                {
                    var sheet = excelPackage.Workbook.Worksheets.Add(L("<%=tableName%>"));
                    sheet.OutLineApplyStyle = true;

                    AddHeader(
                        sheet,
                         <% for (int i=0;i<SourceTable.Columns.Count;i++) { %> 
                             <% if (SourceTable.Columns[i].IsPrimaryKeyMember) {  %>
                              <% continue; %>
                             <%} %>
                         
                         <%if(i==SourceTable.Columns.Count-1) {%>
                          L("<%=tableName%>.<%=SourceTable.Columns[i].Name%>")
                         <%} else{%>
                          L("<%=tableName%>_<%=SourceTable.Columns[i].Name%>"),
                         <%}%>
                       <% } %>
                        );

                    AddObjects(
                        sheet, 2, <%=paramName%>ListDtos,
                          <% for (int i=0;i<SourceTable.Columns.Count;i++) { %> 
                           <% if (SourceTable.Columns[i].IsPrimaryKeyMember) {  %>
                              <% continue; %>
                             <%} %>
                          
                         <%if(i==SourceTable.Columns.Count-1) {%>
                           _ => _.<%=SourceTable.Columns[i].Name%>
                         <%} else{%>
                           _ => _.<%=SourceTable.Columns[i].Name%>,
                         <%}%>
                       <% } %>

                        );

                    //Formatting cells
<%--
                    var lastLoginTimeColumn = sheet.Column(10);
                    lastLoginTimeColumn.Style.Numberformat.Format = "yyyy-mm-dd";

                    var creationTimeColumn = sheet.Column(12);
                    creationTimeColumn.Style.Numberformat.Format = "yyyy-mm-dd";--%>

                    for (var i = 1; i <=<%=SourceTable.Columns.Count+1%>; i++)
                    {
                        sheet.Column(i).AutoFit();
                    }
                });
        }
    }
}

<script runat="template">
<!-- #include file="TemplateUtilities.cs" -->
</script>